name: Website Uptime Monitor

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:  # Allows manual trigger from Actions tab
  push:
    branches: [ main, master ]  # Test on push

jobs:
  check-uptime:
    runs-on: ubuntu-latest

    steps:
      - name: Check website status
        id: check
        run: |
          echo "Checking https://www.andresmit.co.za..."
          
          # Perform the check (-L follows redirects)
          response=$(curl -L -s -o /dev/null -w "%{http_code}|%{time_total}" https://www.andresmit.co.za)
          status_code=$(echo $response | cut -d'|' -f1)
          response_time=$(echo $response | cut -d'|' -f2)
          
          echo "status_code=$status_code" >> $GITHUB_OUTPUT
          echo "response_time=$response_time" >> $GITHUB_OUTPUT
          
          if [ $status_code -eq 200 ]; then
            echo "✅ Website is UP (Status: $status_code, Response: ${response_time}s)"
            echo "status=up" >> $GITHUB_OUTPUT
          else
            echo "❌ Website is DOWN (Status: $status_code)"
            echo "status=down" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const statusCode = '${{ steps.check.outputs.status_code }}';
            const timestamp = new Date().toISOString();
            
            // Check if there's already an open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['website-down']
            });
            
            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Website Down Alert',
                body: `### Website Monitoring Alert
            
                **Status:** 🔴 DOWN
                **URL:** https://www.andresmit.co.za
                **Status Code:** ${statusCode || 'Unknown'}
                **Time:** ${timestamp}
                **Run:** [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
                The website uptime check has failed. Please investigate.`,
                labels: ['website-down', 'urgent']
              });
            
              console.log('Created new issue for website downtime');
            } else {
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `**Still down** as of ${timestamp}\n**Status Code:** ${statusCode || 'Unknown'}\n[View run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });
            
              console.log('Added comment to existing downtime issue');
            }

      - name: Close Issue on Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString();
            const responseTime = '${{ steps.check.outputs.response_time }}';
            
            // Find open downtime issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['website-down']
            });
            
            // Close them with a comment
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Website is back up!**\n**Time:** ${timestamp}\n**Response Time:** ${responseTime}s\n[View run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });
            
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            
              console.log(`Closed issue #${issue.number}`);
            }

      - name: Log Status
        if: always()
        run: |
          echo "===================="
          echo "Uptime Check Complete"
          echo "Status: ${{ steps.check.outputs.status }}"
          echo "Status Code: ${{ steps.check.outputs.status_code }}"
          echo "Response Time: ${{ steps.check.outputs.response_time }}s"
          echo "===================="